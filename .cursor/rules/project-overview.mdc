---
description: 
globs: 
alwaysApply: false
---
# 프로젝트 아키텍처 및 핵심 로직 가이드

이 문서는 `imbak` 프로젝트의 기술 스택, 파일 구조, 그리고 핵심 동작 원리를 설명합니다.

### 1. 기술 스택 및 개요

- **백엔드**: [Python](mdc:https:/www.python.org) 기반의 [Flask](mdc:https:/flask.palletsprojects.com) 웹 애플리케이션
- **프론트엔드**: Jinja2 템플릿, 순수 JavaScript (ES6+), CSS3
- **의존성**: `Flask`, `requests` (외부 API 호출용), `gunicorn` (배포용 WSGI 서버). 모든 의존성은 [requirements.txt](mdc:requirements.txt)에 명시되어 있습니다.
- **배포**: [Dockerfile](mdc:Dockerfile)이 포함되어 있어 Docker를 이용한 컨테이너 기반 배포가 가능합니다.

이 프로젝트는 외부 API([golfmon.net](mdc:http:/golfmon.net))에서 골프장 예약 정보를 가져와 사용자에게 필터링 및 정렬 기능을 제공하는 웹 서비스입니다.

### 2. 주요 파일 설명

- **`app.py`**: [app.py](mdc:app.py)
  - **역할**: 애플리케이션의 메인 로직을 담당하는 핵심 파일입니다.
  - **주요 기능**:
    - `/golf` 엔드포인트를 통해 모든 웹 요청을 처리합니다.
    - 외부 API에서 골프장 데이터를 요청하고 받아옵니다.
    - 사용자가 선택한 조건(지역, 날짜, 골프장, 정렬 방식)에 따라 데이터를 필터링하고 가공합니다.
    - 과거 날짜에 대한 조회를 서버 단에서 방지합니다.
    - 가공된 데이터를 `index.html` 템플릿으로 전달하여 렌더링합니다.

- **`templates/index.html`**: [templates/index.html](mdc:templates/index.html)
  - **역할**: 사용자가 보는 메인 화면을 구성하는 유일한 템플릿 파일입니다.
  - **주요 기능**:
    - Jinja2 템플릿 언어를 사용하여 서버로부터 받은 데이터를 동적으로 표시합니다.
    - 검색 필터(지역, 날짜, 골프장 선택 등) 폼을 포함합니다.
    - 검색 결과를 카트 형태로 보여줍니다.
    - 날짜 선택기(date picker)에서 오늘 이전 날짜를 선택하지 못하도록 `min` 속성을 설정합니다.
    - 검색 후에도 사용자가 선택했던 필터 값(예: 체크된 골프장)이 유지되도록 상태를 표시합니다.

- **`static/main.js`**: [static/main.js](mdc:static/main.js)
  - **역할**: 프론트엔드의 모든 사용자 인터랙션과 동적 기능을 관리합니다.
  - **주요 기능**:
    - 필터(지역, 날짜, 정렬) 변경 시 자동으로 폼을 제출하여 페이지를 새로고침합니다.
    - 검색 버튼 클릭 시, 골프장이 선택되었는지 유효성을 검사합니다.
    - 검색 실행 시 로딩 애니메이션을 표시하고, 필터 창을 부드럽게 축소시킵니다.
    - 사용자의 필터 창 확장/축소 상태를 로컬 스토리지(`localStorage`)에 저장하고 복원합니다.

- **`static/main.css`**: [static/main.css](mdc:static/main.css)
  - **역할**: 애플리케이션의 전반적인 스타일을 정의합니다. 카드 레이아웃, 폼 디자인, 반응형 스타일 등이 포함됩니다.

### 3. 핵심 동작 흐름

이 서비스의 핵심은 **"필터링 조건 변경"**과 **"검색 실행"**을 구분하여 처리하는 것입니다. 이 구분은 `source` 쿼리 파라미터를 통해 이루어집니다.

1.  **초기 접속 또는 필터 변경 (source != 'search')**:
    - 사용자가 "골프장 지역"이나 "날짜"를 변경하면 `static/main.js`는 `source` 파라미터 없이 폼을 제출합니다.
    - `app.py`는 이를 감지하고, API를 호출하여 해당 조건의 **전체 골프장 목록(`all_golf_venues`)만** 가져옵니다.
    - 이때, 검색 결과(`banners`)는 빈 리스트로 처리하여 화면에 카드 목록이 나타나지 않도록 합니다.
    - `index.html`은 업데이트된 골프장 목록을 기반으로 체크박스를 새로 렌더링합니다. (기본적으로 모두 해제된 상태)

2.  **검색 실행 (source == 'search')**:
    - 사용자가 원하는 골프장을 체크하고 "검색" 버튼을 클릭합니다.
    - `static/main.js`는 `source=search` 파라미터를 추가하여 폼을 제출합니다.
    - `app.py`는 `source`가 `search`인 것을 확인하고, 선택된 골프장(`selected_golf_venues`)을 포함한 모든 필터 조건을 적용하여 데이터를 필터링하고 정렬합니다.
    - 최종 결과(`banners`)와 선택된 골프장 목록(`selected_golf_venues`)을 `index.html`로 전달합니다.
    - 템플릿은 전달받은 `selected_golf_venues`를 사용해 검색 조건으로 사용된 체크박스들을 다시 `checked` 상태로 렌더링하여 사용자 선택을 유지합니다.
